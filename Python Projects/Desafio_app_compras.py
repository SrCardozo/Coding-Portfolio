{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN/R9P4TB8TVbUEf7Rgrmhk"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 547
        },
        "id": "27Nyi29d-RDX",
        "outputId": "a49c1341-9cd4-42cc-d74b-d31beb1fcee2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1 Criar uma nova lista de compras\n",
            "2 Carregar uma lista existente\n",
            "3 Sair\n",
            "Escolha uma opção:1\n",
            "1 Adicionar item\n",
            "2 Remover item\n",
            "3 Visualizar lista\n",
            "4 Salvar e sair\n",
            "5 Sair sem salvar\n",
            "Escolha uma opção:5\n",
            "1 Criar uma nova lista de compras\n",
            "2 Carregar uma lista existente\n",
            "3 Sair\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "Interrupted by user",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-2-ffd93734e24c>\u001b[0m in \u001b[0;36m<cell line: 122>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    122\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'__main__'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    123\u001b[0m     \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msystem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'cls'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 124\u001b[0;31m     \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-2-ffd93734e24c>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     80\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Sair'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     81\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 82\u001b[0;31m         \u001b[0mopcao\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Escolha uma opção:'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     83\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     84\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mopcao\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'1'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    849\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    850\u001b[0m             )\n\u001b[0;32m--> 851\u001b[0;31m         return self._input_request(str(prompt),\n\u001b[0m\u001b[1;32m    852\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
          ]
        }
      ],
      "source": [
        "# %%writefile compras.py  -> salvar como arquivo .py\n",
        "\n",
        "import json as js, time, os\n",
        "from pathlib import Path\n",
        "\n",
        "\n",
        "def adicionar_item(compras, item, quantidade):\n",
        "    compras[item] = quantidade\n",
        "\n",
        "\n",
        "def remover_item(compras, item):\n",
        "    del compras[item]\n",
        "\n",
        "\n",
        "def visualizar_compras(compras):\n",
        "    for item in compras:\n",
        "        print(f'{item}: {compras[item]}')\n",
        "    print('\\nPressione enter para continuar')\n",
        "    input()\n",
        "\n",
        "\n",
        "def salvar_compras(compras, nome_arquivo):\n",
        "    with open(f'C:/Users/AMCTE/Downloads/Listas/{nome_arquivo}', 'w') as arquivo:\n",
        "        js.dump(compras, arquivo)\n",
        "\n",
        "\n",
        "def carregar_compras(nome_arquivo):\n",
        "    with open(nome_arquivo, 'r') as arquivo:\n",
        "        return js.loads(arquivo.read())\n",
        "\n",
        "\n",
        "\n",
        "def gerenciar_compras(compras, nome_arquivo=None):\n",
        "    while True:\n",
        "        os.system('cls' if os.name == 'nt' else 'clear')\n",
        "        print(1, 'Adicionar item')\n",
        "        print(2, 'Remover item')\n",
        "        print(3, 'Visualizar lista')\n",
        "        print(4, 'Salvar e sair')\n",
        "        print(5, 'Sair sem salvar')\n",
        "\n",
        "        opcao = input('Escolha uma opção:')\n",
        "\n",
        "        if opcao == '1':\n",
        "            item = input('Digite o nome do item:')\n",
        "            qtd = int(input('Digite a quantidade:'))\n",
        "            adicionar_item(compras, item, qtd)\n",
        "\n",
        "        elif opcao == '2':\n",
        "            item = input('Digite o nome do item:')\n",
        "            remover_item(compras, item)\n",
        "\n",
        "        elif opcao == '3':\n",
        "            visualizar_compras(compras)\n",
        "\n",
        "        elif opcao == '4':\n",
        "            if nome_arquivo is None:\n",
        "                salvar_nome = input('Digite o nome do arquivo para salvar:')\n",
        "\n",
        "                if not salvar_nome.endswith('.json'):\n",
        "                    salvar_nome += '.json'\n",
        "            else:\n",
        "                salvar_nome = nome_arquivo\n",
        "\n",
        "            salvar_compras(compras, salvar_nome)\n",
        "            break\n",
        "\n",
        "        elif opcao == '5':\n",
        "            break\n",
        "\n",
        "        else:\n",
        "            print('Opção inválida!')\n",
        "            time.sleep(1)\n",
        "\n",
        "def main():\n",
        "    while True:\n",
        "        os.system('cls' if os.name == 'nt' else 'clear')\n",
        "        print(1, 'Criar uma nova lista de compras')\n",
        "        print(2, 'Carregar uma lista existente')\n",
        "        print(3, 'Sair')\n",
        "\n",
        "        opcao = input('Escolha uma opção:')\n",
        "\n",
        "        if opcao == '1':\n",
        "            compras = {}\n",
        "            gerenciar_compras(compras)\n",
        "\n",
        "        elif opcao == '2':\n",
        "            print('\\nListas disponíveis:')\n",
        "            listas = [arquivo for arquivo in list(Path('C:/Users/AMCTE/Downloads/Listas').iterdir()) if arquivo.name.endswith('.json')]\n",
        "\n",
        "            if not listas:\n",
        "                print('Nenhuma lista encontrada')\n",
        "                time.sleep(2)\n",
        "                continue\n",
        "            else:\n",
        "                for i, lista in enumerate(listas):\n",
        "                    print(i + 1, lista.name)\n",
        "                print('\\n')\n",
        "                escolha = int(input('Escolha uma lista para carregar (0 se nenhuma):'))\n",
        "\n",
        "                if 0 > escolha or escolha > len(listas):\n",
        "                    print('Opção inválida!')\n",
        "                    time.sleep(1)\n",
        "                    continue\n",
        "\n",
        "                if escolha == 0:\n",
        "                    continue\n",
        "\n",
        "                arquivo = listas[escolha - 1]\n",
        "                compras = carregar_compras(arquivo)\n",
        "                gerenciar_compras(compras, arquivo.name)\n",
        "\n",
        "        elif opcao == '3':\n",
        "            break\n",
        "\n",
        "        else:\n",
        "            print('Opção inválida!')\n",
        "            time.sleep(1)\n",
        "\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    os.system('cls')\n",
        "    main()"
      ]
    }
  ]
}